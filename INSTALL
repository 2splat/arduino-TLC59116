Obtaining:
Should be in github as https://github.com/2splat/arduino-TLC59116
You only need the arduino_TLC59116.zip if you are a user. NOT the "download zip" button!
Developers, of course, should checkout (or download the .zip).

Installing:
All Platforms:
Download the arduino_TLC59116.zip (not the "download zip" button).
    https://github.com/2splat/arduino-TLC59116/raw/layers/arduino_TLC59116.zip
In the arduino-ide, use the "sketch" menu, 'import library...:add library' entry,
navigate to the downloaded .zip (usually in your Downloads folder), 'open'.

Updating:
All Platforms:
Before arduino ide 1.5.x, manually delete the folder 'libraries/TLC59116',
located in your "sketchbooks" directory.
    On windows, it should be in your Documents,
    On linux it's in ~/sketchbooks,
    On mac, ?
Quit restart the Arduino IDE.
Then do Installing above.

Making. Assumes linux.
Requirements:
* gnumake (might work with other makes)
* clang-check from clang-tools (optional)
* perl
* zip
* markdown (optional)
* awk

To make the zip:
    make zip
It should make the zip. If you are missing any tools, some functionality may be missing (keywords.txt, for example).
It should whine about missing tools. Install them, "rm" the zip, make again.


Developing:
The directory is ino'ified, you can develop out of here!
* Remove the TLC59116 library you may have installed above, it will conflict.
* make the .ino for testing:
    % make inoify
* You can open the tlc59116_lib.ino in the arduino ide
* Note the additional tabs for the libraries .h/.cpp's!
Due to a "interesting" arduino-ide behavior, the source files do #include with "", the make puts them back to canonical for the zip.
The "" seems to work anyway.

You can also develop with a separate .ino.
Probably you'd want to do something like linking $tlc59116_dev_dir to ~/sketchbook/libraries/TLC59116.

NB: If you add any #includes in the .h's, you should test the .zip (import, etc.). Because, the arduino-ide will fail to load the .h's that are included in the .h's ! You'll get 'not in scope' errors in the .h's.
Workarounds:
* "extern" can fix some things;
* You may have to provide a boilerplate pile of #include's for the hapless user (goes in their .ino)
