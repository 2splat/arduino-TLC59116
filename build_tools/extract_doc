#!/bin/sh
"""":
export LD_LIBRARY_PATH=`llvm-config-3.4 --libdir`; exec python "$0" "$@"
"""

"""
Produce documentation from source files.

Needs build_src/buildrc* for various paths/settings

"""
import sys,os
from pprint import pprint

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from cpp_ast import CppDoc_Visitors, CppDoc

def read_from_rc(rc_file, opts):
    print "read from %s" % rc_file
    if not os.path.exists(rc_file):
        raise Exception("No such file/dir for --rc %s" % rc_file)
    
    if os.path.isfile(rc_file):
        print "do file"
    else:
        for f in glob.glob( os.path.append(rc_file, '.extract_doc_rc*')):
            read_from_rc(f, opts)

    exit(1)

def main():
    from optparse import OptionParser, OptionGroup

    print "argv: %s" % sys.argv
    global opts

    parser = OptionParser("usage: %prog [options] {filename} [clang-args*]")
    parser.add_option("", "--rc", dest="rc",
                      help="Path to a k=v file of these options, or dir of .extract_doc_rc.* files, default=./.extract_doc.rc",
                      metavar="dirs", type=str)
    parser.add_option("", "--include-paths", dest="includePaths",
                      help="Additional paths for #includes (comma list w/globs)",
                      metavar="dirs", type=str, default=None)
    parser.add_option("", "--max-depth", dest="maxDepth",
                      help="Limit cursor expansion to depth N",
                      metavar="N", type=int, default=None)
    parser.add_option("", "--debug_limit-depth", dest="debugLimit",
                      help="Limit to approximately this many statements",
                      metavar="N", type=int, default=None)
    # fixme: remove
    parser.disable_interspersed_args()
    (opts, args) = parser.parse_args()

    if len(args) == 0:
        parser.error('Expected input-file-name')
    
    def_rc = './.extract_doc.rc'
    if not opts.rc and os.path.exists(def_rc):
        opts.rc = def_rc
    if opts.rc:
        read_from_rc(opts.rc, opts)

    vc = CppDoc_Visitors.Raw

    if isinstance(vc,basestring):
        pieces = vc.split('.')
        print "pieces %s" % pieces
        first_piece = pieces.pop(0)
        vc = None
        if first_piece in globals():
            vc = globals()[first_piece] # getattr(__main__, pieces.pop(0))
        elif hasattr(CppDoc_Visitors, first_piece):
            vc = getattr(CppDoc_Visitors, first_piece)
        if vc==None:
            raise Exception("No such class %s (or CppDoc_Visitors.%s)" % (first_piece,first_piece))
        while len(pieces) > 0:
            print "..next %s.%s" % (vc,pieces)
            vc = getattr(vc, pieces.pop(0))
    print "Visitor %s" % vc
    inc_paths = opts.includePaths.split(',') if opts.includePaths else []
    # print "Inc %s" % inc_paths
    parsed = [ CppDoc(f, inc_paths, clang_args=['-D__AVR_ATmega328P__'],visitor=vc, debug_limit=opts.debugLimit)
        for f in args]
    print("CPPDOC %s" % len(parsed))
    print("---")
    for p in parsed:
        p.print_extents()

if __name__ == '__main__':
    main()
