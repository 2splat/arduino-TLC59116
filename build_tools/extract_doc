#!/bin/sh
"""":
export LD_LIBRARY_PATH=`llvm-config-3.4 --libdir`; exec python "$0" "$@"
"""

"""
Produce documentation from source files.

Needs build_src/buildrc* for various paths/settings

"""
import sys,os
from pprint import pprint
import pickle

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from cpp_ast import CppDoc
from ast_wiki_doc import CppDoc_Processor_WikiProcessor

# Some debug classes for --processor
from cppdoc_processor import CppDoc_Processor

class CppDoc_Processor_Dump(CppDoc_Processor):
    def __call__(self):
        for p in self.parsed:
            p.print_extents()

class CppDoc_Processor_TopComment(CppDoc_Processor):
    def __call__(self):
        for p in self.parsed:
            for e in p.source_text.internal_extent:
                if not e.node:
                    if e.extent.start.column == 1:
                        # print e.describe_short()
                        for l in p.file_chunk(e.extent):
                            sys.stdout.write( l)

if os.environ.get('DEBUG'):
    def debug(msg):
        print(msg)
else:
    def debug(msg):
        pass

def main():
    from optparse import OptionParser, OptionGroup

    debug( "argv: %s" % sys.argv)
    global opts

    parser = OptionParser("usage: %prog [options] {filename*} [clang-args*]")
    parser.add_option("", "--processor", dest="processorClass",
                      help="Class name to process the parsed files, loading...",
                      metavar="class name", type=str, default=CppDoc_Processor_WikiProcessor)
    parser.add_option("", "--include-paths", dest="includePaths",
                      help="Additional paths for #includes (comma list w/globs)",
                      metavar="dirs", type=str, default=None)
    parser.add_option("", "--max-depth", dest="maxDepth",
                      help="Limit cursor expansion to depth N",
                      metavar="N", type=int, default=None)
    parser.add_option("", "--debug_limit-depth", dest="debugLimit",
                      help="Limit to approximately this many statements",
                      metavar="N", type=int, default=None)
    # fixme: remove
    parser.disable_interspersed_args()
    (opts, args) = parser.parse_args()

    if len(args) == 0:
        parser.error('Expected input-file-name')

    processor = opts.processorClass

    if isinstance(processor,basestring):
        pieces = processor.split('.')
        debug( "pieces %s" % pieces)
        first_piece = pieces.pop(0)
        processor = None
        if first_piece in globals():
            processor = globals()[first_piece] # getattr(__main__, pieces.pop(0))
        elif hasattr(CppDoc_Processor, first_piece):
            processor = getattr(CppDoc_Processors, first_piece)
        if processor==None:
            raise Exception("No such class %s (or CppDoc_Processor.%s)" % (first_piece,first_piece))
        while len(pieces) > 0:
            debug( "..next %s.%s" % (processor,pieces))
            processor = getattr(processor, pieces.pop(0))
    inc_paths = opts.includePaths.split(',') if opts.includePaths else []
    # print "Inc %s" % inc_paths
    parsed = [ CppDoc(f, inc_paths, clang_args=['-D__AVR_ATmega328P__'], debug_limit=opts.debugLimit)
        for f in args]
    debug("CPPDOC %s, processor %s" % (len(parsed), processor))
    debug("---")
    processor(parsed).process()

if __name__ == '__main__':
    main()
