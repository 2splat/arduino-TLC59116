#!/bin/sh
"""":
export LD_LIBRARY_PATH=`llvm-config-3.4 --libdir`; exec python "$0" "$@"
"""

"""
A command line tool for parsing a c++ file, and dumping the ast, using the Clang Index
Library.

E.g.
cpp_ast --show-ids 1 --include-paths ~/dev/thirdparty/arduino/hardware/arduino/cores/arduino,/home/awgrover/dev/thirdparty/arduino/hardware/tools/avr/lib/avr/include,/home/awgrover/dev/thirdparty/arduino/hardware/arduino/variants/standard,/home/awgrover/dev/thirdparty/arduino/libraries/*  --vistor Raw build/TLC59116.hpp
"""

import re
import sys,os
from pprint import pprint

sys.path.append(os.path.dirname(os.path.realpath(__file__)))
from cpp_ast import CppDoc_Visitors, CppDoc

def main():
    from optparse import OptionParser, OptionGroup

    print "argv: %s" % " | ".join(sys.argv)
    global opts

    parser = OptionParser("usage: %prog [options] {filename} [clang-args*]")
    parser.add_option("", "--show-ids", dest="showIDs",
                      help="Don't compute cursor IDs (very slow)",
                      default=False)
    parser.add_option("", "--include-paths", dest="includePaths",
                      help="Where to look for #includes (comma list w/globs)",
                      metavar="dirs", type=str, default=None)
    parser.add_option("", "--max-depth", dest="maxDepth",
                      help="Limit cursor expansion to depth N",
                      metavar="N", type=int, default=None)
    parser.add_option("", "--debug_limit-depth", dest="debugLimit",
                      help="Limit to approximately this many statements",
                      metavar="N", type=int, default=None)
    parser.add_option("", "--visitor", dest="visitorClass",
                      help="File/class to process each node",
                      metavar="class/file", type=str, default=CppDoc_Visitors.DeclVisitor)
    parser.disable_interspersed_args()
    (opts, args) = parser.parse_args()

    if len(args) == 0:
        parser.error('Expected input-file-name')

    vc = opts.visitorClass
    if isinstance(vc,basestring):
        pieces = vc.split('.')
        print "pieces %s" % pieces
        first_piece = pieces.pop(0)
        vc = None
        if first_piece in globals():
            vc = globals()[first_piece] # getattr(__main__, pieces.pop(0))
        elif hasattr(CppDoc_Visitors, first_piece):
            vc = getattr(CppDoc_Visitors, first_piece)
        if vc==None:
            raise Exception("No such class %s (or CppDoc_Visitors.%s)" % (first_piece,first_piece))
        while len(pieces) > 0:
            print "..next %s.%s" % (vc,pieces)
            vc = getattr(vc, pieces.pop(0))
    print "Visitor %s" % vc
    parsed = CppDoc(args[0], opts.includePaths.split(','), visitor=vc, debug_limit=opts.debugLimit)
    print("---%s-" % (parsed._visits-1))
    print("---")
    parsed.print_extents()

if __name__ == '__main__':
    main()
